#!/bin/bash

## health functions
check_health() {

	if [ ! -s /run/ci-runner.pid ]; then
		exit 1
	fi

	while IFS= read -r pid; do
		if ! ps -p "$pid" > /dev/null; then
			exit 1
		fi
  done < <(grep -v '^ *#' /run/ci-runner.pid)

  exit 0
}

## start functions
start_woodpecker() {

	legacy_start="true"

	if [ -d "/etc/woodpecker" ]; then
		while IFS= read -r -d '' file; do
			# disable legacy start
			legacy_start="false"

			# load WOODPECKER_* Variables
			set -o allexport
			# shellcheck disable=SC1090
			source "$file"
			set +o allexport

			printf "using agent config %s\n" "$file"
			# Run Woodpecker Agent
			woodpecker-agent "$@" \
				>/dev/stdout 2>/dev/stderr &
			echo "$!" >>/run/ci-runner.pid
		done <   <(find "/etc/woodpecker" -type f -name '*.agent' -print0)
	fi

	if [ "$legacy_start" == "true" ]; then
		woodpecker-agent "$@" \
			>/dev/stdout 2>/dev/stderr &
		echo "$!" >>/run/ci-runner.pid
	fi
}

start_container() {
	# clean stale pid file
	rm /run/ci-runner.pid >/dev/null 2>&1

	case "$CI_RUNNER" in
		"woodpecker")
			start_woodpecker "$@"
		;;
		"gitlab")
			gitlab-runner "$@" \
				>/dev/stdout 2>/dev/stderr &
			echo "$!" >>/run/ci-runner.pid
		;;
		*)
			forgejo-runner "$@" \
				>/dev/stdout 2>/dev/stderr &
			echo "$!" >>/run/ci-runner.pid
		;;
	esac

	while IFS= read -r pid; do
		if ! ps -p "$pid" > /dev/null; then
			exit 1
		fi
		wait "$pid"
  done < <(grep -v '^ *#' /run/ci-runner.pid)
}
usage() {
	BASE_NAME="$(basename "$0")"
	printf "%s\t%s\t%s\n" "${BASE_NAME}" "run" "starts the [forgejo-runner|woodpecker-agent|gitlab-runner]"
}

###########

case $1 in
	run)
		shift
		start_container "$@"
	;;
	health)
		shift
		check_health "$@"
	;;
	*)
		usage
	;;
esac
